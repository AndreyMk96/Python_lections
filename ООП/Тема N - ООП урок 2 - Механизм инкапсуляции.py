"""Инкапсуляция - ограничение к данным и методам класса извне"""


class Point:
    def __init__(self, x=0, y=0, z=0):
        self.x = x
        self._y = y
        self.__z = z

    def set_coord_z(self, z):
        """Изменять атрибуты с режимом доступа Private, можно через функции - сеттеры"""
        self.__z = z

    def get_cord_z(self):
        """Получать атрибуты с режимом доступа Private, мы можем через функции - геттеры"""
        return self.__z


pt = Point(1, 2, 3)
print(pt.x)  # Мы можем обратиться к атрибуту х извне класса

# attribute (без нижних подчеркиваний вначале) - публичное свойство Public

# _attribute (c одним нижним подчеркиванием) - режим доступа Protected
# (служит для обращения внутри класса и во всех его дочерних классах)

# __attribute (с двумя подчеркиваниями) - режим доcтупа Private
# (служит для обращения только внутри класса

print(pt._y)  # К атрибуту с типом protected тоже можно обратиться извне
# В Python указатель на тип атрибута лишь сигнализирует что даное свойство является защищенным,
# но никак явно не ограничивает достум к нему извне

#print(pt.__z)  # К атрибутам с режимом доступа Private, нельзя обратиться напрямую
pt.set_coord_z(100)
print(pt.get_cord_z())