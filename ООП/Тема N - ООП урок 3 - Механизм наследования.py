"""Тема N - ООП урок 3 - Механизм наследования"""
class Geom:
    name = "geom"

    def set_coords(self, x1, y1, x2, y2):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.draw()  # Видно, что метод draw вызывается из того класса, для которого применяется метод set_coords
        # однако такой метод нельзя вызвать для исходного класса (см стр 56)
        # поэтому в базовом классе рекомендуется вызывать методы, которые имеются в базовом классе, а не в дочерних


class Line(Geom):  # Если в качестве аргумента указать другой класс, то текущему классу будут доступны атрибуты другого класса
    def draw(self):
        print("Рисование линии")

    """def set_coords(self, x1, y1, x2, y2):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2"""


class Rect(Geom):  # Создадим еще один класс наследуемый от класса Geom3

    def draw(self):
        print("Рисование Прямоугольника")

    name = "Rect"  # Атрибут можно переопределить в дочернем классе. В PyСharm при переопределении всплывает указатель

    """def set_coords(self, x1, y1, x2, y2):  # И добавим аналогичный метод set_coords, однако чтобы одинаковых
        # методов не было, его можно перенести в родительский класс
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2"""


g = Geom()
print(g.name)
# print(g.draw)  # Так понятное дело мы не можем
l = Line()
print(l.name)
# Определение класса на основе другого называется наследованием
# Geom - это базовый(родительский) класс
# Line - дочерний класс
r = Rect()
l.set_coords(1,1,2,2)
r.set_coords(3,3,4,4)  # Теперь мы можем применить метод set_сoords к экземплярам класса line и rect
# C точки зрения программы метод сначала ищется в дочернем классе, и если не находится, то ищется в родительском
# В случае наследования self в функции родительского класса будет ссылаться на наследуемый класс
print(g.__dict__)
print(l.__dict__)  # Видны свойства дочернего класса
#g.set_coords(1,2,3,4) Ошибка(см стр 10 - 12)
print(l.name, r.name) # Если в наследуемом классе атрибута нет, он ищется в родительском. В наследуемом классе атрибут
# можно переопределить
